#include <bits/stdc++.h>
#define mod 1000000007
#define all(x) x.begin(), x.end()
#define run()    \
    long long t; \
    cin >> t;    \
    while (t--)
#define faster()                      \
    cin.tie(0);                       \
    ios_base::sync_with_stdio(false); \
    cout.tie(0);
#define f first
#define s second
using namespace std;

#include <bits/stdc++.h>

using namespace std;

int n, m, ans;
int parent[100001];
int sz[100001];

struct canh
{
    int dau, cuoi, ts;
};

int cmp(canh a, canh b)
{
    return a.ts < b.ts;
}

// tạo ra một tập hợp mới chỉ chứa phần tử i.
void makeSets(int n)
{
    for (int i = 1; i <= n; i++)
    {
        parent[i] = i;
        sz[i] = 1;
    }
}

// cho biết đại diện của tập hợp có chứa phần tử v
int Find(int u)
{
    if (u == parent[u])
        return u;
    return parent[u] = Find(parent[u]);
}

// gộp tập hợp chứa phần tử a và tập hợp chứa phần tử b thành một.
bool Union(int a, int b)
{
    a = Find(a);
    b = Find(b);
    // a và b nằm trong cùng một tập hợp nếu như đại diện của
    // hai tập chứa chúng là giống nhau và không nằm trong cùng một
    // tập hợp nếu ngược lại.

    if (a == b)
        return 0;

    if (sz[a] < sz[b])
        swap(a, b);

    parent[b] = a;
    sz[a] += sz[b];
    ans = max(ans, sz[a]);
    return 1;
}

int main()
{
    int n, m, dau, cuoi, ts;
    faster();
    run()
    {
        cin >> n >> m;
        vector<canh> ds;
        for (int i = 0; i < m; i++)
        {
            cin >> dau >> cuoi >> ts;
            ds.push_back({dau, cuoi, ts});
        }
        sort(all(ds), cmp);
        makeSets(n);
        int res = 0;
        for (int i = 0; i < ds.size(); i++)
            if (Union(ds[i].dau, ds[i].cuoi))
                // có nghĩa là nếu thêm cạnh này vào thì sẽ thành chu trình
                res += ds[i].ts;
        cout << res << endl;
    }
    return 0;
}
